{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "fileTypes": ["rsx"],
    "name": "RSX",
    "patterns": [
        {
            "include": "#rust-section"
        },
        {
            "include": "#script-section"
        },
        {
            "include": "#template-section"
        },
        {
            "include": "#style-section"
        }
    ],
    "repository": {
        "rust-section": {
            "begin": "^---\\s*$",
            "end": "^---\\s*$",
            "name": "meta.embedded.block.rust.rsx",
            "contentName": "source.rust.embedded.rsx",
            "patterns": [
                {
                    "include": "source.rust"
                }
            ]
        },
        "forbidden-tags": {
            "patterns": [
                {
                    "match": "<template[\\s>]",
                    "name": "invalid.illegal.forbidden-tag.template.html"
                },
                {
                    "match": "<script[\\s>]",
                    "name": "invalid.illegal.forbidden-tag.script.html"
                },
                {
                    "match": "<style[\\s>]",
                    "name": "invalid.illegal.forbidden-tag.style.html"
                }
            ]
        },
        "forbidden-events": {
            "patterns": [
                {
                    "match": "\\s(on[a-zA-Z]+)=",
                    "name": "invalid.illegal.event-handler.html",
                    "captures": {
                        "1": {
                            "name": "invalid.illegal.event-attribute.html"
                        }
                    }
                }
            ]
        },
        "script-section": {
            "begin": "<script(?:\\s[^>]*)?>",
            "end": "</script>",
            "name": "meta.embedded.block.typescript.rsx",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.tag.script.html"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "entity.name.tag.script.html"
                }
            },
            "contentName": "source.ts",
            "patterns": [
                {
                    "include": "source.ts"
                }
            ]
        },
        "template-section": {
            "begin": "<template(?:\\s[^>]*)?>",
            "end": "</template>",
            "name": "meta.embedded.block.handlebars.rsx",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.tag.template.html"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "entity.name.tag.template.html"
                }
            },
            "contentName": "text.html.handlebars",
            "patterns": [
                {
                    "include": "#handlebars-expressions"
                },
                {
                    "include": "#svelte-blocks"
                },
                {
                    "include": "#forbidden-tags"
                },
                {
                    "include": "#forbidden-events"
                },
                {
                    "include": "text.html.basic"
                }
            ]
        },
        "style-section": {
            "begin": "<style(?:\\s[^>]*)?>",
            "end": "</style>",
            "name": "meta.embedded.block.scss.rsx",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.tag.style.html"
                }
            },
            "endCaptures": {
                "0": {
                    "name": "entity.name.tag.style.html"
                }
            },
            "contentName": "source.scss",
            "patterns": [
                {
                    "include": "source.scss"
                },
                {
                    "include": "source.css"
                },
                {
                    "include": "#scss-content"
                }
            ]
        },
        "handlebars-expressions": {
            "patterns": [
                {
                    "begin": "\\{\\{",
                    "end": "\\}\\}",
                    "name": "markup.other.handlebars",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.variable.begin.handlebars"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.variable.end.handlebars"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#handlebars-content"
                        }
                    ]
                },
                {
                    "match": "\\{[^{].*?\\}",
                    "name": "invalid.illegal.single-brace.handlebars"
                },
                {
                    "match": "client=\"(react|vue|svelte)\"",
                    "name": "meta.attribute.client.rsx",
                    "captures": {
                        "0": {
                            "name": "entity.other.attribute-name.html"
                        },
                        "1": {
                            "name": "string.quoted.double.html"
                        }
                    }
                }
            ]
        },
        "handlebars-content": {
            "patterns": [
                {
                    "match": "@html\\b",
                    "name": "keyword.control.handlebars"
                },
                {
                    "match": "\\b(?:true|false|null|undefined)\\b",
                    "name": "constant.language.handlebars"
                },
                {
                    "match": "\\b[0-9]+(?:\\.[0-9]+)?\\b",
                    "name": "constant.numeric.handlebars"
                },
                {
                    "match": "\\b(?:if|else|each|as|await|then|catch|key)\\b",
                    "name": "keyword.control.handlebars"
                },
                {
                    "match": "[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*",
                    "name": "variable.other.handlebars"
                },
                {
                    "match": "\\?|:|\\.|\\[|\\]|>|<|>=|<=|==|!=|&&|\\|\\|",
                    "name": "keyword.operator.handlebars"
                },
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.handlebars",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.handlebars"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.handlebars",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.handlebars"
                        }
                    ]
                }
            ]
        },
        "svelte-blocks": {
            "patterns": [
                {
                    "begin": "\\{\\{#if\\b",
                    "end": "\\{\\{/if\\}\\}",
                    "name": "meta.block.conditional.rsx",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.begin.rsx"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.conditional.end.rsx"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\{\\{:else(?:\\s+if)?\\b[^}]*\\}\\}",
                            "name": "keyword.control.conditional.else.rsx"
                        },
                        {
                            "include": "#handlebars-expressions"
                        },
                        {
                            "include": "#forbidden-tags"
                        },
                        {
                            "include": "#forbidden-events"
                        },
                        {
                            "include": "text.html.basic"
                        }
                    ]
                },
                {
                    "begin": "\\{\\{#each\\b",
                    "end": "\\{\\{/each\\}\\}",
                    "name": "meta.block.iteration.rsx",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.iteration.begin.rsx"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.iteration.end.rsx"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#handlebars-expressions"
                        },
                        {
                            "include": "#forbidden-tags"
                        },
                        {
                            "include": "#forbidden-events"
                        },
                        {
                            "include": "text.html.basic"
                        }
                    ]
                },
                {
                    "begin": "\\{\\{#await\\b",
                    "end": "\\{\\{/await\\}\\}",
                    "name": "meta.block.async.rsx",
                    "beginCaptures": {
                        "0": {
                            "name": "keyword.control.async.begin.rsx"
                        }
                    },
                    "endCaptures": {
                        "0": {
                            "name": "keyword.control.async.end.rsx"
                        }
                    },
                    "patterns": [
                        {
                            "match": "\\{\\{:(?:then|catch)\\b[^}]*\\}\\}",
                            "name": "keyword.control.async.rsx"
                        },
                        {
                            "include": "#handlebars-expressions"
                        },
                        {
                            "include": "#forbidden-tags"
                        },
                        {
                            "include": "#forbidden-events"
                        },
                        {
                            "include": "text.html.basic"
                        }
                    ]
                },
                {
                    "match": "\\{\\{[#/](?:if|each|await|key)\\b[^}]*\\}\\}",
                    "name": "keyword.control.block.rsx"
                },
                {
                    "match": "\\{\\{:(?:else|then|catch)\\b[^}]*\\}\\}",
                    "name": "keyword.control.block.rsx"
                }
            ]
        },
        "scss-content": {
            "patterns": [
                {
                    "match": "\\b(?:color|background|background-color|border|margin|padding|width|height|font-size|font-family|font-weight|display|flex|grid|position|top|left|right|bottom|z-index|opacity|transform|transition|animation|cursor|text-align|border-radius|box-shadow|outline)\\b",
                    "name": "support.type.property-name.css"
                },
                {
                    "match": "\\b(?:auto|none|inherit|initial|unset|normal|bold|italic|underline|overline|line-through|uppercase|lowercase|capitalize|center|left|right|flex|block|inline|pointer|relative|absolute|fixed|static)\\b",
                    "name": "support.constant.property-value.css"
                },
                {
                    "match": "\\b(?:px|em|rem|%|vh|vw|vmin|vmax|pt|pc|in|cm|mm|ex|ch|fr|s|ms|deg|rad|turn)\\b",
                    "name": "keyword.other.unit.css"
                },
                {
                    "match": "#[0-9a-fA-F]{3,8}\\b",
                    "name": "constant.other.color.hex.css"
                },
                {
                    "match": "\\b(?:rgba?|hsla?|hwb|lab|lch|oklab|oklch)\\s*\\(",
                    "name": "support.function.color.css"
                },
                {
                    "match": "\\b(?:red|green|blue|white|black|yellow|orange|purple|pink|gray|grey|transparent|currentColor)\\b",
                    "name": "support.constant.color.w3c.css"
                },
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "name": "comment.block.scss"
                },
                {
                    "match": "//.*$",
                    "name": "comment.line.double-slash.scss"
                },
                {
                    "match": "&\\s*(?::[a-zA-Z-]+(?:\\([^)]*\\))?)+",
                    "name": "entity.other.attribute-name.pseudo-class.scss"
                },
                {
                    "match": "&\\s*::[a-zA-Z-]+",
                    "name": "entity.other.attribute-name.pseudo-element.scss"
                },
                {
                    "match": "&(?:[.#\\w-]+)*",
                    "name": "entity.other.attribute-name.parent-selector.scss"
                },
                {
                    "match": "\\$[a-zA-Z_-][a-zA-Z0-9_-]*",
                    "name": "variable.scss"
                },
                {
                    "match": "@(?:import|include|mixin|function|extend|if|else|for|each|while|return|warn|error|debug|media|keyframes|at-root)\\b",
                    "name": "keyword.control.at-rule.scss"
                },
                {
                    "match": "\\b[0-9]+(?:\\.[0-9]+)?",
                    "name": "constant.numeric.scss"
                },
                {
                    "begin": "\\{",
                    "end": "\\}",
                    "name": "meta.property-list.scss",
                    "patterns": [
                        {
                            "include": "#scss-content"
                        }
                    ]
                },
                {
                    "match": "([a-zA-Z_-][a-zA-Z0-9_-]*)\\s*(?=:)",
                    "name": "support.type.property-name.scss",
                    "captures": {
                        "1": {
                            "name": "support.type.property-name.scss"
                        }
                    }
                },
                {
                    "match": ":",
                    "name": "punctuation.separator.key-value.scss"
                },
                {
                    "match": ";",
                    "name": "punctuation.terminator.rule.scss"
                },
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.scss",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.scss"
                        }
                    ]
                },
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.scss",
                    "patterns": [
                        {
                            "match": "\\\\.",
                            "name": "constant.character.escape.scss"
                        }
                    ]
                },
                {
                    "match": "([a-zA-Z_-][a-zA-Z0-9_-]*)(?=\\s*\\{)",
                    "name": "entity.name.tag.scss"
                },
                {
                    "match": "\\.[a-zA-Z_-][a-zA-Z0-9_-]*",
                    "name": "entity.other.attribute-name.class.scss"
                },
                {
                    "match": "#[a-zA-Z_-][a-zA-Z0-9_-]*",
                    "name": "entity.other.attribute-name.id.scss"
                }
            ]
        }
    },
    "scopeName": "source.rsx"
}
